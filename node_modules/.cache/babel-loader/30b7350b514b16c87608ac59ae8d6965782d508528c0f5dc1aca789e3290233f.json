{"ast":null,"code":"import AppSubmenu from './AppSubmenu';\nimport AppInlineMenu from './AppInlineMenu';\nexport default {\n  name: 'AppMenu',\n  emits: ['menu-click', 'menuitem-click', 'root-menuitem-click', 'sidebar-mouse-over', 'sidebar-mouse-leave', 'toggle-menu', 'change-inlinemenu'],\n  props: {\n    model: Array,\n    menuMode: String,\n    colorScheme: String,\n    menuActive: {\n      type: Boolean,\n      default: false\n    },\n    activeInlineProfile: {\n      type: Boolean,\n      default: false\n    },\n    sidebarActive: {\n      type: Boolean,\n      default: false\n    },\n    sidebarStatic: {\n      type: Boolean,\n      default: false\n    },\n    pinActive: {\n      type: Boolean,\n      default: false\n    }\n  },\n  components: {\n    AppSubmenu: AppSubmenu,\n    AppInlineMenu: AppInlineMenu\n  },\n  methods: {\n    onSidebarMouseOver: function onSidebarMouseOver() {\n      this.$emit('sidebar-mouse-over');\n    },\n    onSidebarMouseLeave: function onSidebarMouseLeave() {\n      this.$emit('sidebar-mouse-leave');\n    },\n    onMenuClick: function onMenuClick(event) {\n      this.$emit('menu-click', event);\n    },\n    onMenuItemClick: function onMenuItemClick(event) {\n      this.$emit('menuitem-click', event);\n    },\n    onRootMenuItemClick: function onRootMenuItemClick(event) {\n      this.$emit('root-menuitem-click', event);\n    },\n    onToggleMenu: function onToggleMenu(event) {\n      this.$emit('toggle-menu', event);\n    },\n    onChangeActiveInlineMenu: function onChangeActiveInlineMenu() {\n      this.$emit('change-inlinemenu');\n    },\n    isHorizontal: function isHorizontal() {\n      return this.menuMode === 'horizontal';\n    },\n    isSlim: function isSlim() {\n      return this.menuMode === 'slim';\n    },\n    isOverlay: function isOverlay() {\n      return this.menuMode === 'overlay';\n    },\n    isStatic: function isStatic() {\n      return this.menuMode === 'static';\n    },\n    isSidebar: function isSidebar() {\n      return this.menuMode === 'sidebar';\n    },\n    isDesktop: function isDesktop() {\n      return window.innerWidth > 991;\n    },\n    isMobile: function isMobile() {\n      return window.innerWidth <= 991;\n    }\n  }\n};","map":{"version":3,"mappings":"AAoCA,OAAOA,UAAS,MAAO,cAAc;AACrC,OAAOC,aAAY,MAAO,iBAAiB;AAE3C,eAAe;EACXC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE,CAAC,YAAY,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,aAAa,EAAE,mBAAmB,CAAC;EAC/IC,KAAK,EAAE;IACHC,KAAK,EAAEC,KAAK;IACZC,QAAQ,EAAEC,MAAM;IAChBC,WAAW,EAAED,MAAM;IACnBE,UAAU,EAAE;MACRC,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACb,CAAC;IACDC,mBAAmB,EAAE;MACjBH,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACb,CAAC;IACDE,aAAa,EAAE;MACXJ,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACb,CAAC;IACDG,aAAa,EAAE;MACXL,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACb,CAAC;IACDI,SAAS,EAAE;MACPN,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACb;EACJ,CAAC;EACDK,UAAU,EAAE;IACRlB,UAAU,EAAVA,UAAU;IACVC,aAAa,EAAbA;EACJ,CAAC;EACDkB,OAAO,EAAE;IACLC,kBAAkB,gCAAG;MACjB,IAAI,CAACC,KAAK,CAAC,oBAAoB,CAAC;IACpC,CAAC;IACDC,mBAAmB,iCAAG;MAClB,IAAI,CAACD,KAAK,CAAC,qBAAqB,CAAC;IACrC,CAAC;IACDE,WAAW,uBAACC,KAAK,EAAE;MACf,IAAI,CAACH,KAAK,CAAC,YAAY,EAAEG,KAAK,CAAC;IACnC,CAAC;IACDC,eAAe,2BAACD,KAAK,EAAE;MACnB,IAAI,CAACH,KAAK,CAAC,gBAAgB,EAAEG,KAAK,CAAC;IACvC,CAAC;IACDE,mBAAmB,+BAACF,KAAK,EAAE;MACvB,IAAI,CAACH,KAAK,CAAC,qBAAqB,EAAEG,KAAK,CAAC;IAC5C,CAAC;IACDG,YAAY,wBAACH,KAAK,EAAE;MAChB,IAAI,CAACH,KAAK,CAAC,aAAa,EAAEG,KAAK,CAAC;IACpC,CAAC;IACDI,wBAAwB,sCAAG;MACvB,IAAI,CAACP,KAAK,CAAC,mBAAmB,CAAC;IACnC,CAAC;IACDQ,YAAY,0BAAG;MACX,OAAO,IAAI,CAACtB,QAAO,KAAM,YAAY;IACzC,CAAC;IACDuB,MAAM,oBAAG;MACL,OAAO,IAAI,CAACvB,QAAO,KAAM,MAAM;IACnC,CAAC;IACDwB,SAAS,uBAAG;MACR,OAAO,IAAI,CAACxB,QAAO,KAAM,SAAS;IACtC,CAAC;IACDyB,QAAQ,sBAAG;MACP,OAAO,IAAI,CAACzB,QAAO,KAAM,QAAQ;IACrC,CAAC;IACD0B,SAAS,uBAAG;MACR,OAAO,IAAI,CAAC1B,QAAO,KAAM,SAAS;IACtC,CAAC;IACD2B,SAAS,uBAAG;MACR,OAAOC,MAAM,CAACC,UAAS,GAAI,GAAG;IAClC,CAAC;IACDC,QAAQ,sBAAG;MACP,OAAOF,MAAM,CAACC,UAAS,IAAK,GAAG;IACnC;EACJ;AACJ,CAAC","names":["AppSubmenu","AppInlineMenu","name","emits","props","model","Array","menuMode","String","colorScheme","menuActive","type","Boolean","default","activeInlineProfile","sidebarActive","sidebarStatic","pinActive","components","methods","onSidebarMouseOver","$emit","onSidebarMouseLeave","onMenuClick","event","onMenuItemClick","onRootMenuItemClick","onToggleMenu","onChangeActiveInlineMenu","isHorizontal","isSlim","isOverlay","isStatic","isSidebar","isDesktop","window","innerWidth","isMobile"],"sourceRoot":"","sources":["C:\\Users\\eletr\\Desktop\\AtlantisVue\\src\\AppMenu.vue"],"sourcesContent":["<template>\n    <div class=\"layout-menu-wrapper\" :class=\"{ 'layout-sidebar-active': sidebarActive }\" @click=\"onMenuClick\" @mouseover=\"onSidebarMouseOver\" @mouseleave=\"onSidebarMouseLeave\">\n        <div class=\"menu-logo\">\n            <a href=\"#\" class=\"logo\" style=\"height: 77px\">\n                <img :src=\"'layout/images/logo-' + (colorScheme === 'light' ? 'dark' : 'light') + '.svg'\" />\n            </a>\n\n            <a href=\"#\" class=\"app-name\" >\n                <img :src=\"'layout/images/appname-' + (colorScheme === 'light' ? 'dark' : 'light') + '.svg'\" />\n            </a>\n            <a href=\"#\" class=\"menu-pin\" @click=\"onToggleMenu\">\n                <span v-if=\"isOverlay()\" class=\"pi pi-times\"></span>\n                <span v-if=\"isSidebar() && !sidebarStatic && pinActive\" class=\"pi pi-unlock\"></span>\n                <span v-if=\"isSidebar() && sidebarStatic && pinActive\" class=\"pi pi-lock\"></span>\n            </a>\n        </div>\n\n        <div class=\"layout-menu-container\">\n            <AppSubmenu\n                class=\"layout-menu\"\n                :items=\"model\"\n                :menuMode=\"menuMode\"\n                :menuActive=\"menuActive\"\n                :root=\"true\"\n                :parentMenuItemActive=\"true\"\n                @menu-click=\"onMenuClick\"\n                @menuitem-click=\"onMenuItemClick\"\n                @root-menuitem-click=\"onRootMenuItemClick\"\n            />\n        </div>\n\n        <AppInlineMenu :menuMode=\"menuMode\" :activeInlineProfile=\"activeInlineProfile\" @change-inlinemenu=\"onChangeActiveInlineMenu\"></AppInlineMenu>\n    </div>\n</template>\n\n<script>\nimport AppSubmenu from './AppSubmenu';\nimport AppInlineMenu from './AppInlineMenu';\n\nexport default {\n    name: 'AppMenu',\n    emits: ['menu-click', 'menuitem-click', 'root-menuitem-click', 'sidebar-mouse-over', 'sidebar-mouse-leave', 'toggle-menu', 'change-inlinemenu'],\n    props: {\n        model: Array,\n        menuMode: String,\n        colorScheme: String,\n        menuActive: {\n            type: Boolean,\n            default: false,\n        },\n        activeInlineProfile: {\n            type: Boolean,\n            default: false,\n        },\n        sidebarActive: {\n            type: Boolean,\n            default: false,\n        },\n        sidebarStatic: {\n            type: Boolean,\n            default: false,\n        },\n        pinActive: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    components: {\n        AppSubmenu,\n        AppInlineMenu,\n    },\n    methods: {\n        onSidebarMouseOver() {\n            this.$emit('sidebar-mouse-over');\n        },\n        onSidebarMouseLeave() {\n            this.$emit('sidebar-mouse-leave');\n        },\n        onMenuClick(event) {\n            this.$emit('menu-click', event);\n        },\n        onMenuItemClick(event) {\n            this.$emit('menuitem-click', event);\n        },\n        onRootMenuItemClick(event) {\n            this.$emit('root-menuitem-click', event);\n        },\n        onToggleMenu(event) {\n            this.$emit('toggle-menu', event);\n        },\n        onChangeActiveInlineMenu() {\n            this.$emit('change-inlinemenu');\n        },\n        isHorizontal() {\n            return this.menuMode === 'horizontal';\n        },\n        isSlim() {\n            return this.menuMode === 'slim';\n        },\n        isOverlay() {\n            return this.menuMode === 'overlay';\n        },\n        isStatic() {\n            return this.menuMode === 'static';\n        },\n        isSidebar() {\n            return this.menuMode === 'sidebar';\n        },\n        isDesktop() {\n            return window.innerWidth > 991;\n        },\n        isMobile() {\n            return window.innerWidth <= 991;\n        },\n    },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}